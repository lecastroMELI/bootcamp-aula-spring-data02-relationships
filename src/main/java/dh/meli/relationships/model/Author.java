package dh.meli.relationships.model;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.*;
import java.util.List;

/* TUDO O QUE FOR MODELADO AQUI, OU SEJA, DENTRO DE UMA CLASSE MODEL, SER√Å PERSISTIDO NO BANCO DE DADOS.
* NUMA CLASSE DTO OU DAO PODEM SER DEFINIDOS OS ATRIBUTOS QUE N√ÉO DEVEM CONSTAR NO BANCO
*
* PERSISITIR NO BANCO DE DADOS = A CLASSE QUE SER√Å ARMAZENADA NO BANCO DE DADOS
*
* A ANOTA√á√ÉO @Entity √â A ANOTA√á√ÉO QUE INDICA ESSA PERSIST√äNCIA PARA O JPA. */
@Entity
@Getter @Setter @NoArgsConstructor // LOMBOK - M√âTODOS DE ACESSO
public class Author {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    @Column(nullable = false)
    private String name;

    // ----- ENDERE√áO (ADDRESS) ------- //
    /* CARDINALIDADE BI-DIRECIONAL, POIS TEM ESSA CARDINALIDADE EM AMBAS AS CLASSES (Author e Address)
    * PORTANTO, DADO UM AUTOR EU OBTENHO O ENDERE√áO E VICE-VERSA.
    *
    * üîò mappedBy = UTILIZADO PARA INDICAR QUAL √â A TABELA QUE √â PROPRIET√ÅRIA DO RELACIONAMENTO.
    * COLOCA-SE O NOME DO CAMPO (DEFINIDO NO MODEL ADDRESS) QUE SER√Å USADO COMO REFER√äNCIA PARA O OBJETO AUTHOR.
    *
    * üîò fetch = FetchType.LAZY = Faz com que a informa√ß√£o s√≥ seja buscada quando for necess√°rio. Ou seja,
    * a consulta s√≥ acontece quando o relacionamento exigir.
    * Em nosso exemplo, deixando essa op√ß√£o, ser√£o feitas duas consultas ao banco de dados,
    * sem essa op√ß√£o, j√° √© feito o join direto. Usar essa op√ß√£o com cautela.
    *
    * üîò cascade = CascadeType.PERSIST = AO FAZER A PESISTENCIA DO AUTOR, QUERO SALVAR ESSE RELACIONAMENTO TAMB√âM
    * PERSIST √© para insert
    * REMOVE para o delete (apaga tudo em cascata)
    * ALL √© para qualquer opera√ß√£o que for em cascata.
    *
    * 1:1 - 1 AUTOR PARA 1 ENDERE√áO */
    @OneToOne(mappedBy = "author", fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    @JsonIgnoreProperties("author") // IGNORA OS DADOS DO AUTOR (AO PREENCHER O ADDRESS N√ÉO TRAGA OS DADOS DO AUTHOR)
    private Address address; // CAMPO QUE REFERENCIA O OBJETO. NOME DO CAMPO: address

    // ----- LIVRO (BOOK) ------- //
    // N:M - AUTOR TEM 1 OU N LIVROS E VICE-VERSA
    @ManyToMany
    @JoinTable(
        name = "book_author", // nome da tabela de jun√ß√£o
        joinColumns = @JoinColumn(name = "author_id", referencedColumnName = "id"), // atributo do 'author' na tabela de liga√ß√£o
        inverseJoinColumns = @JoinColumn(name = "book_id", referencedColumnName = "id") // atributo do 'book' na tabela de liga√ß√£o
    ) // TABELA DE JUN√á√ÉO/LIGA√á√ÉO
    @JsonIgnoreProperties("authors") // QUANDO CARREGAR O LIVRO, IGNORAR O AUTOR
    private List<Book> books; // CAMPO QUE REFERENCIA O OBJETO. NOME DO CAMPO: books
}
